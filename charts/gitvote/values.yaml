# GitVote chart default configuration values

imagePullSecrets: []
imageTag: ""
nameOverride: ""
pullPolicy: IfNotPresent

# Enable dynamic resource name prefix
#
# Enabling the dynamic resource name prefix ensures that the resources are named dynamically based on the Helm
# installation's name. This allows multiple installations of this chart in a single Kubernetes namespace. The prefix
# can be defined by using the `fullnameOverride`.
dynamicResourceNamePrefixEnabled: false

# Overwrites the installation's fullname generation (used for the dynamic resource name prefix)
fullnameOverride: ""

# Directory path where the configuration files should be mounted
configDir: "/home/gitvote/.config/gitvote"

# Database configuration
db:
  host: ""
  port: "5432"
  dbname: gitvote
  user: postgres
  password: postgres

# Database migrator configuration
dbmigrator:
  job:
    image:
      # Database migrator image repository (without the tag)
      repository: public.ecr.aws/g6m3a0y9/gitvote-dbmigrator

# GitVote service configuration
gitvote:
  # Address to listen on
  addr: 0.0.0.0:9000

  # GitHub configuration
  #
  # The app require the following permissions:
  # - Repository permissions:
  #   - Checks: read/write
  #   - Contents: read
  #   - Issues: read/write
  #   - Metadata: read
  #   - Pull requests: read/write
  # - Organization
  #   - Members: read
  #
  # Subscribe to events:
  # - Issue Comment
  # - Issues
  # - Pull Request
  #
  # GitVote can process GitHub webhooks data sent to /api/events.
  # In the GitHub app, enable webhook and set the target URL to your exposed
  # endpoint, ie: https://example.com/api/events
  # Define a random webhook secret, you can use the following command to
  # generate one: openssl rand -hex 32
  # After creating the app, download the private key an fill-up the values
  # below:
  github:
    # GitHub application ID
    appID: null
    # GitHub application private key path
    appPrivateKey: null
    # GitHub application webhook secret
    webhookSecret: null

  # Ingress configuration
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    rules: []
    tls: []

  # Service configuration
  service:
    type: NodePort
    port: 80

  # Deployment configuration
  deploy:
    replicaCount: 1
    image:
      repository: public.ecr.aws/g6m3a0y9/gitvote
    resources: {}

# PostgreSQL configuration
postgresql:
  enabled: true
  image:
    repository: artifacthub/postgres
    tag: latest
  persistence:
    mountPath: /data
  postgresqlUsername: postgres
  postgresqlPassword: postgres
  postgresqlDatabase: gitvote
  postgresqlDataDir: /data/pgdata
